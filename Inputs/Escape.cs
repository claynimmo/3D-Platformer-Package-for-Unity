//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/3DPlatformerBasics/Inputs/Escape.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Escape: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Escape()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Escape"",
    ""maps"": [
        {
            ""name"": ""Keybinds"",
            ""id"": ""64328593-1cad-4564-ae76-065c0b7e989f"",
            ""actions"": [
                {
                    ""name"": ""ExitGame"",
                    ""type"": ""Button"",
                    ""id"": ""99b54285-5083-4dca-bb42-b01edff4290f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnterGame"",
                    ""type"": ""Button"",
                    ""id"": ""fbd04eaf-2273-4034-989d-b91599ee6b7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37296646-840c-4d4e-8e65-d68ea849c9f1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1b15613-8540-4694-9174-b4946f013980"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cff9ee70-46f8-4e13-8903-d0045110536a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnterGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keybinds
        m_Keybinds = asset.FindActionMap("Keybinds", throwIfNotFound: true);
        m_Keybinds_ExitGame = m_Keybinds.FindAction("ExitGame", throwIfNotFound: true);
        m_Keybinds_EnterGame = m_Keybinds.FindAction("EnterGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keybinds
    private readonly InputActionMap m_Keybinds;
    private List<IKeybindsActions> m_KeybindsActionsCallbackInterfaces = new List<IKeybindsActions>();
    private readonly InputAction m_Keybinds_ExitGame;
    private readonly InputAction m_Keybinds_EnterGame;
    public struct KeybindsActions
    {
        private @Escape m_Wrapper;
        public KeybindsActions(@Escape wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExitGame => m_Wrapper.m_Keybinds_ExitGame;
        public InputAction @EnterGame => m_Wrapper.m_Keybinds_EnterGame;
        public InputActionMap Get() { return m_Wrapper.m_Keybinds; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeybindsActions set) { return set.Get(); }
        public void AddCallbacks(IKeybindsActions instance)
        {
            if (instance == null || m_Wrapper.m_KeybindsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeybindsActionsCallbackInterfaces.Add(instance);
            @ExitGame.started += instance.OnExitGame;
            @ExitGame.performed += instance.OnExitGame;
            @ExitGame.canceled += instance.OnExitGame;
            @EnterGame.started += instance.OnEnterGame;
            @EnterGame.performed += instance.OnEnterGame;
            @EnterGame.canceled += instance.OnEnterGame;
        }

        private void UnregisterCallbacks(IKeybindsActions instance)
        {
            @ExitGame.started -= instance.OnExitGame;
            @ExitGame.performed -= instance.OnExitGame;
            @ExitGame.canceled -= instance.OnExitGame;
            @EnterGame.started -= instance.OnEnterGame;
            @EnterGame.performed -= instance.OnEnterGame;
            @EnterGame.canceled -= instance.OnEnterGame;
        }

        public void RemoveCallbacks(IKeybindsActions instance)
        {
            if (m_Wrapper.m_KeybindsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeybindsActions instance)
        {
            foreach (var item in m_Wrapper.m_KeybindsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeybindsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeybindsActions @Keybinds => new KeybindsActions(this);
    public interface IKeybindsActions
    {
        void OnExitGame(InputAction.CallbackContext context);
        void OnEnterGame(InputAction.CallbackContext context);
    }
}
